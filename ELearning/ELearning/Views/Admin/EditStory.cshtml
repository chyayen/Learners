@model ELearning.Models.StoryModel
@{
    ViewBag.Title = "Edit Story";
}

@section Styles {
    <link href="~/Content/summernote/summernote-bs5.min.css" rel="stylesheet" />
    }

<div class="pagetitle">
    <h1>@ViewBag.Title</h1>
    <nav>
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="@Url.Action("Index")">Home</a></li>
            <li class="breadcrumb-item">Stories</li>
            <li class="breadcrumb-item active">@ViewBag.Title</li>
        </ol>
    </nav>
</div><!-- End Page Title -->

<section class="section">

    <div class="card">
        <div class="card-body pt-3">
            <button type="button" class="btn btn-sm btn-secondary" onclick="history.back()"><i class="bi bi-arrow-left-circle"></i> Back</button>
            <hr class="border-light-subtle" />
            <form id="formAddStory" class="g-3">
                <div class="row mb-3">
                    <label for="inputText" class="col-sm-2 col-form-label">Title</label>
                    <div class="col-sm-10">
                        @Html.TextBoxFor(m => m.Title, new { @class = "form-control" })
                    </div>
                </div>
                <div class="row mb-3">
                    <label for="inputText" class="col-sm-2 col-form-label">Class</label>
                    <div class="col-sm-10">
                        @Html.DropDownList("ClassID", new SelectList(Model.ClassList, "Value", "Text", "-- Select --"), new { @class = "form-select" })
                    </div>
                </div> 

                <!-- Section Dropdown -->
                <div class="row mb-3" id="sectionContainer" style="display:none;">
                    <label class="col-sm-2 col-form-label">Sections</label>
                    <div class="col-sm-10">
                        <select class="form-select" id="SectionIDs" name="SectionIDs" multiple required>
                            <!-- Options will be dynamically loaded here -->
                        </select>
                    </div>
                </div>

                <!-- Student Multi-Select -->
                <div class="row mb-3" id="studentContainer" style="display:none;">
                    <label class="col-sm-2 col-form-label">Students</label>
                    <div class="col-sm-10">
                        <select class="form-select" id="StudentIDs" name="StudentIDs" multiple required>
                            <!-- Students will be dynamically populated here -->
                        </select>
                    </div>
                </div>

                <div class="row mb-3">
                    <label for="inputText" class="col-sm-2 col-form-label">Content</label>
                    <div class="col-sm-10">
                        @Html.TextAreaFor(m => m.Content, new { @class = "form-control", rows = "20", cols = "80" })
                    </div>
                </div>
                <div class="row mt-5">
                    <label for="inputText" class="col-sm-2 col-form-label">&nbsp;</label>
                    <div class="col-sm-10">
                        <button type="button" class="btn btn-sm btn-success" id="btnUpdateStory">Update</button>
                    </div>
                </div>
            </form>
        </div>
    </div>

</section>

@section Scripts {
    <script src="~/Content/summernote/summernote-bs5.min.js"></script>
    <script>
        // Pre-selected values from the model (set these on the server-side)
        var preSelectedSections = @Html.Raw(Json.Encode(Model.SelectedSectionIds != null && Model.SelectedSectionIds.Count() > 0 ? Model.SelectedSectionIds.ToList() : new List<int>()));
        var preSelectedStudents = @Html.Raw(Json.Encode(Model.SelectedStudentIds != null && Model.SelectedStudentIds.Count() > 0 ? Model.SelectedStudentIds.ToList() : new List<int>()));

        // Populate Sections based on selected Class
        function fetchSectionsByClass(classId) {
            $.ajax({
                url: `/Admin/GetClassSectionsByClassID?classId=${classId}`,
                type: 'GET',
                success: function (sections) {
                    $('#SectionIDs').empty();
                    sections.forEach(section => {
                        let option = new Option(section.Name, section.ID);
                        // Check if section should be pre-selected
                        if (preSelectedSections.includes(section.ID)) {
                            option.selected = true;
                        }
                        $('#SectionIDs').append(option); 
                    }); 
                    $('#sectionContainer').show(); // Show the section container
                    //$('#SectionIDs').trigger('change'); // Trigger change to load students

                    if (preSelectedSections.length == 0) {
                        $('#SectionIDs').find('option').prop('selected', true); // Select all sections by default
                    }

                    const selectedSections = $('#SectionIDs').val();
                    fetchStudentsBySection(classId, selectedSections);
                },
                error: function () {
                    alert('Error loading sections');
                }
            });
        }

        // Populate Students based on selected Sections
        function fetchStudentsBySection(classId, sectionIds) {
            $.ajax({
                url: '/Admin/GetClassStudentsBySectionID',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ classid: classId, sectionIds: sectionIds }),
                success: function (students) {
                    $('#StudentIDs').empty();
                    students.forEach(student => {
                        let option = new Option(student.Name, student.ID);
                        // Check if student should be pre-selected
                        if (preSelectedStudents.includes(student.ID)) {
                            option.selected = true;
                        }
                        $('#StudentIDs').append(option);
                    });
                    $('#StudentIDs').find('option').prop('selected', true); // Select all students by default
                    $('#studentContainer').show(); // Show the student container
                },
                error: function () {
                    alert('Error loading students');
                }
            });
        }

        // Trigger fetch on Class selection
        $('#ClassID').change(function () {
            const classId = $(this).val();
            if (classId) {
                fetchSectionsByClass(classId);
            }
        });

        // Trigger fetch on Section selection to filter students
        $('#SectionIDs').change(function () {
            const selectedSections = $(this).val();
            const classId = $('#ClassID').val();
            if (selectedSections && selectedSections.length > 0) {
                fetchStudentsBySection(classId, selectedSections);
            } else {
                $('#StudentIDs').empty(); // Clear students if no sections are selected
            }
        });

        $(document).ready(function () {
            $('#Content').summernote({
                height: 300,  // set the height of the editor
                callbacks: {
                    onImageUpload: function (files) {
                        uploadImage(files[0]);
                    },
                    onChange: function (contents, $editable) {
                        // Add the class 'fb-page-content' to all <p> tags inside Summernote
                        $('#Content').next().find('p').each(function () {
                            $(this).addClass('fb-page-content');
                        })
                    }
                }
            });

            // Initialize Select2 for dynamic field
            $('#SectionIDs').select2({
                theme: "bootstrap-5",
                width: $(this).data('width') ? $(this).data('width') : $(this).hasClass('w-100') ? '100%' : 'style',
                placeholder: "-- All --"
            });
            $('#StudentIDs').select2({
                theme: "bootstrap-5",
                width: $(this).data('width') ? $(this).data('width') : $(this).hasClass('w-100') ? '100%' : 'style',
                placeholder: "-- All --"
            });

            const classId = $('#ClassID').val();
            if (classId) {
                fetchSectionsByClass(classId);
            }


            //function will be called on button click having id btnUpdateStory
            $("#btnUpdateStory").click(function () {
                var storyModel = { //Passing data
                    ID: @Model.ID,
                    Title: $("#Title").val(), //Reading text box values using Jquery
                    ClassID: $("#ClassID").val(),
                    Content: $("#Content").val(),
                    SelectedSectionIds: $("#SectionIDs").val() ? $("#SectionIDs").val().map(Number) : [], // Selected section
                    SelectedStudentIds: $("#StudentIDs").val() ? $("#StudentIDs").val().map(Number) : [] // Selected students as an array of integers
                    //Content: $("#StoryContent > .ql-editor").html()
                };

                $.ajax(
                    {
                        type: "POST", //HTTP POST Method
                        url: "@Url.Action("SaveStory", "Admin")", // Controller/View
                        contentType: 'application/json; charset=utf-8',
                        data: JSON.stringify({
                            model: storyModel,
                            action: "update"
                        }),
                        dataType: 'json',
                        beforeSend: function () {
                            Swal.showLoading();
                        },
                        success: function (result) {
                            if (result.success) {
                                Swal.fire({
                                    icon: "success",
                                    title: result.message,
                                }).then(function () {
                                    window.location.href = "@Url.Action("ManageStories", "Admin")";
                                });
                            } else {
                                Swal.fire({
                                    icon: "error",
                                    title: result.message,
                                });
                            }
                        }

                    });
            });
        });

        // Image upload function
        function uploadImage(file) {
            var data = new FormData();
            data.append("file", file);

            $.ajax({
                url: '/Admin/UploadStoryImages',  // Your upload URL
                type: 'POST',
                data: data,
                contentType: false,
                processData: false,
                success: function (url) {
                    $('#Content').summernote('insertImage', url);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert('Error uploading image: ' + textStatus);
                }
            });
        }
    </script> 

}

